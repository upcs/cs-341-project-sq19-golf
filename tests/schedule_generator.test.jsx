import React from 'react';
import { shallow } from 'enzyme';

import ScheduleGenerator from '../src/server/schedule_generator.js';

describe('ScheduleGenerator', () => {
  test('Should generate all viable schedules with classes input', () => {
  	let classes = [ { id: 394,
         subject: 'CS',
         number: '341',
         section: 'A',
         title: 'Software Engineering',
         crn: '40338',
         start: '8:10 am',
         end: '9:05 am',
         days: 'MWF',
         professor: 'Andrew M  Nuxoll ',
         location: 'Shiley Hall 249',
         credits: '3.000\r',
         mask: [Array],
         ones: [Array] },
       { id: 395,
         subject: 'CS',
         number: '341',
         section: 'B',
         title: 'Software Engineering',
         crn: '40339',
         start: '9:45 am',
         end: '11:10 am',
         days: 'TR',
         professor: 'Benjamin Raymond  Tribelhorn ',
         location: 'Shiley Hall 249',
         credits: '3.000\r',
         mask: [Array],
         ones: [Array] } ];

    expect(ScheduleGenerator.generateSchedules(['341'], ['CS'], classes, [])).toEqual([ [ { id: 394,
          subject: 'CS',
          number: '341',
          section: 'A',
          title: 'Software Engineering',
          crn: '40338',
          start: '8:10 am',
          end: '9:05 am',
          days: 'MWF',
          professor: 'Andrew M  Nuxoll ',
          location: 'Shiley Hall 249',
          credits: '3.000\r',
          mask
          ones: [12, 0, 12, 0, 12] } ],
      [ { id: 395,
          subject: 'CS',
          number: '341',
          section: 'B',
          title: 'Software Engineering',
          crn: '40339',
          start: '9:45 am',
          end: '11:10 am',
          days: 'TR',
          professor: 'Benjamin Raymond  Tribelhorn ',
          location: 'Shiley Hall 249',
          credits: '3.000\r',
          mask
          ones: [0, 18, 0, 18, 0] } ] ]
);
  });

  test('Should generate no schedules when given empty object input', () => {
    expect(ScheduleGenerator.generateSchedules(['304', '305'], ['BIO', 'BIO'], {})).toEqual([]);
  });

  test('Should generate no schedules when given invalid input', () => {
    expect(ScheduleGenerator.generateSchedules(['a', 'b'], ['1', '2'], {})).toEqual([]);
  });

  test('Should identify matching blacklists', () => {
    expect(ScheduleGenerator.checkBlacklist(["a"], ["a", "b"])).toEqual(false);
  });

  test('Should identify non-matching blacklists', () => {
    expect(ScheduleGenerator.checkBlacklist(["A"], ["a", "b"])).toEqual(true);
  });

  test('Should find viable courses', () => {
    let course = {
      mask: JSON.stringify
      ones: JSON.stringify([0, 1, 0, 1, 0])
    };

    let constraints = {
      timeMask: ["001111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "001111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "001111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]
    }

    expect(ScheduleGenerator.viableCourse(course, constraints)).toEqual(true);
  });

  test('Should find unviable courses', () => {
    let course = {
      mask: JSON.stringify
      ones: JSON.stringify([12, 0, 12, 0, 12])
    };

    let constraints = {
      timeMask
    }

    expect(ScheduleGenerator.viableCourse(course, constraints)).toEqual(false);
  });
});
